#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø BYBIT API v5 - PRODUCTION READY
==================================================
–§–∞–π–ª: src/exchange/bybit_client_v5.py

‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ API –æ—Ç–≤–µ—Ç–æ–≤
‚úÖ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Bybit API v5
‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å reconnect –∏ heartbeat
"""

import ccxt
import time
import logging
import os
import asyncio
import hmac
import hashlib
import json
import threading
import websocket
import aiohttp
import random
from typing import Optional, Dict, Any, List, Callable, Union
from datetime import datetime
from dataclasses import dataclass

logger = logging.getLogger(__name__)

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
try:
    from ..core.unified_config import unified_config
    UNIFIED_CONFIG_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è unified_config –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    unified_config = None
    UNIFIED_CONFIG_AVAILABLE = False

@dataclass
class BybitCredentials:
    """–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Bybit"""
    api_key: str
    api_secret: str
    testnet: bool = True
    recv_window: int = 5000

@dataclass
class BybitEndpoints:
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã Bybit API"""
    rest_base: str
    ws_public: str
    ws_private: str

class BybitAPIError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ API Bybit"""
    def __init__(self, message: str, error_code: int = None, response: dict = None):
        self.message = message
        self.error_code = error_code
        self.response = response
        super().__init__(self.message)

class BybitWebSocketManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    
    def __init__(self, credentials: BybitCredentials, endpoints: BybitEndpoints):
        self.credentials = credentials
        self.endpoints = endpoints
        self.connections = {}
        self.callbacks = {}
        self.reconnect_attempts = {}
        self.max_reconnect_attempts = 10
        self.ping_interval = 20
        self.is_initialized = True
        
        # –ù–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ WebSocket
        self.last_message_time = {'public': time.time(), 'private': time.time()}
        self.max_reconnect_attempts = 10
        self.heartbeat_task = None
        
        logger.info("‚úÖ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def _reconnect_websocket(self, ws_type: str = 'public'):
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket —Å exponential backoff - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        max_retries = self.max_reconnect_attempts
        base_delay = 1
        max_delay = 300  # 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
        
        for attempt in range(max_retries):
            try:
                # Exponential backoff —Å jitter
                delay = min(base_delay * (2 ** attempt) + random.uniform(0, 1), max_delay)
                
                logger.info(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {ws_type} —á–µ—Ä–µ–∑ {delay:.1f}s (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})")
                await asyncio.sleep(delay)
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                old_ws = self.connections.get(ws_type)
                if old_ws:
                    try:
                        old_ws.close()
                    except Exception as e:
                        logger.debug(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
                    self.connections.pop(ws_type, None)
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                success = False
                
                if ws_type == 'public':
                    # –ü—É–±–ª–∏—á–Ω—ã–π WebSocket
                    ws_url = self.endpoints.ws_public
                    
                    def on_message(ws, message):
                        try:
                            data = json.loads(message)
                            self.last_message_time['public'] = time.time()
                            if 'data' in data:
                                self._handle_public_message(data)
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ public —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    
                    def on_error(ws, error):
                        logger.error(f"‚ùå Public WebSocket –æ—à–∏–±–∫–∞: {error}")
                        self.ws_connected['public'] = False
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        threading.Thread(
                            target=lambda: asyncio.run(self._reconnect_websocket('public')),
                            daemon=True
                        ).start()
                    
                    def on_close(ws, close_status_code, close_msg):
                        logger.warning(f"‚ö†Ô∏è Public WebSocket –∑–∞–∫—Ä—ã—Ç: {close_msg}")
                        self.ws_connected['public'] = False
                    
                    def on_open(ws):
                        logger.info("üì° –ü—É–±–ª–∏—á–Ω–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ")
                        self.ws_connected['public'] = True
                        self.reconnect_attempts['public'] = 0
                    
                    ws = websocket.WebSocketApp(
                        ws_url,
                        on_message=on_message,
                        on_error=on_error,
                        on_close=on_close,
                        on_open=on_open
                    )
                    
                    self.connections['public'] = ws
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    ws_thread = threading.Thread(
                        target=lambda: ws.run_forever(ping_interval=self.ping_interval),
                        daemon=True
                    )
                    ws_thread.start()
                    
                    # –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    await asyncio.sleep(2)
                    success = self.ws_connected.get('public', False)
                    
                elif ws_type == 'private':
                    # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π WebSocket
                    ws_url = self.endpoints.ws_private
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    expires = str(int(time.time() * 1000) + 10000)
                    signature = self._generate_signature(expires)
                    
                    auth_msg = {
                        "op": "auth",
                        "args": [{
                            "apiKey": self.credentials.api_key,
                            "expires": expires,
                            "signature": signature
                        }]
                    }
                    
                    def on_message(ws, message):
                        try:
                            data = json.loads(message)
                            self.last_message_time['private'] = time.time()
                            
                            if data.get('op') == 'auth' and data.get('success'):
                                logger.info("‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π WebSocket –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã
                                self._subscribe_private_channels(ws)
                            elif 'data' in data:
                                self._handle_private_message(data)
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ private —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    
                    def on_error(ws, error):
                        logger.error(f"‚ùå Private WebSocket –æ—à–∏–±–∫–∞: {error}")
                        self.ws_connected['private'] = False
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        threading.Thread(
                            target=lambda: asyncio.run(self._reconnect_websocket('private')),
                            daemon=True
                        ).start()
                    
                    def on_close(ws, close_status_code, close_msg):
                        logger.warning(f"‚ö†Ô∏è Private WebSocket –∑–∞–∫—Ä—ã—Ç: {close_msg}")
                        self.ws_connected['private'] = False
                    
                    def on_open(ws):
                        logger.info("üîê –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
                        ws.send(json.dumps(auth_msg))
                    
                    ws = websocket.WebSocketApp(
                        ws_url,
                        on_message=on_message,
                        on_error=on_error,
                        on_close=on_close,
                        on_open=on_open
                    )
                    
                    self.connections['private'] = ws
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    ws_thread = threading.Thread(
                        target=lambda: ws.run_forever(ping_interval=self.ping_interval),
                        daemon=True
                    )
                    ws_thread.start()
                    
                    # –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    await asyncio.sleep(3)
                    success = self.ws_connected.get('private', False)
                
                if success:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                    self.reconnect_attempts[ws_type] = 0
                    logger.info(f"‚úÖ {ws_type} WebSocket –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    return True
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {ws_type} WebSocket: {e}")
                
                if attempt == max_retries - 1:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å {ws_type} WebSocket –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                    return False
        
        return False
    
    def _subscribe_private_channels(self, ws):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏
            subscribe_msg = {
                "op": "subscribe",
                "args": ["position", "order", "wallet"]
            }
            ws.send(json.dumps(subscribe_msg))
            logger.info("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ position, order, wallet")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {e}")
    
    def _handle_public_message(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            topic = data.get('topic', '')
            if 'ticker' in topic:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ä—ã
                pass
            elif 'orderbook' in topic:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–∫–∞–Ω
                pass
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def _handle_private_message(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            topic = data.get('topic', '')
            if 'position' in topic:
                logger.info("üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π")
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
            elif 'order' in topic:
                logger.info("üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤")
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä–∞
            elif 'wallet' in topic:
                logger.info("üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    

    async def _handle_websocket_message(self, message: Dict[str, Any], ws_type: str = 'public'):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.last_message_time[ws_type] = time.time()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ ping/pong
            if message.get('op') == 'ping':
                pong_msg = {'op': 'pong', 'args': [str(int(time.time() * 1000))]}
                
                if ws_type == 'public' and hasattr(self, 'public_ws') and self.public_ws:
                    await self.public_ws.send(json.dumps(pong_msg))
                elif ws_type == 'private' and hasattr(self, 'private_ws') and self.private_ws:
                    await self.private_ws.send(json.dumps(pong_msg))
                
                logger.debug(f"üèì Pong –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {ws_type} WebSocket")
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
            if message.get('success') is False:
                logger.error(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {message.get('ret_msg', 'Unknown error')}")
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if 'topic' in message:
                topic = message['topic']
                data = message.get('data', [])
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                if 'orderbook' in topic:
                    await self._process_orderbook_update(data)
                elif 'trade' in topic:
                    await self._process_trade_update(data)
                elif 'ticker' in topic:
                    await self._process_ticker_update(data)
                elif 'position' in topic:
                    await self._process_position_update(data)
                elif 'order' in topic:
                    await self._process_order_update(data)
                elif 'wallet' in topic:
                    await self._process_wallet_update(data)
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def _websocket_heartbeat(self):
        """Heartbeat –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        while hasattr(self, 'ws_connected') and self.ws_connected:
            try:
                current_time = time.time()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π WebSocket
                if hasattr(self, 'public_ws') and self.public_ws:
                    if current_time - self.last_message_time.get('public', 0) > 30:
                        logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç public WebSocket –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥")
                        asyncio.create_task(self._reconnect_websocket('public'))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π WebSocket
                if hasattr(self, 'private_ws') and self.private_ws:
                    if current_time - self.last_message_time.get('private', 0) > 30:
                        logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç private WebSocket –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥")
                        asyncio.create_task(self._reconnect_websocket('private'))
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –µ—Å–ª–∏ –¥–æ–ª–≥–æ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if current_time - self.last_message_time.get('public', 0) > 20:
                    await self._send_ping('public')
                
                if current_time - self.last_message_time.get('private', 0) > 20:
                    await self._send_ping('private')
                
                await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ heartbeat: {e}")
                await asyncio.sleep(10)

    async def _send_ping(self, ws_type: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ ping —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            ping_msg = {'op': 'ping'}
            
            if ws_type == 'public' and hasattr(self, 'public_ws') and self.public_ws:
                await self.public_ws.send(json.dumps(ping_msg))
                logger.debug("üèì Ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ public WebSocket")
            elif ws_type == 'private' and hasattr(self, 'private_ws') and self.private_ws:
                await self.private_ws.send(json.dumps(ping_msg))
                logger.debug("üèì Ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ private WebSocket")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ping: {e}")

    async def _process_orderbook_update(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
        logger.debug(f"üìä Orderbook update: {len(data)} items")

    async def _process_trade_update(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
        logger.debug(f"üí± Trade update: {len(data)} trades")

    async def _process_ticker_update(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
        logger.debug(f"üìà Ticker update received")

    async def _process_position_update(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
        logger.debug(f"üìç Position update received")

    async def _process_order_update(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
        logger.debug(f"üìã Order update received")

    async def _process_wallet_update(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
        logger.debug(f"üí∞ Wallet update received")
        
    def _generate_signature(self, expires: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        val = f"GET/realtime{expires}"
        signature = hmac.new(
            bytes(self.credentials.api_secret, "utf-8"),
            bytes(val, "utf-8"),
            hashlib.sha256
        ).hexdigest()
        return signature
    
    def _create_auth_payload(self) -> dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ payload –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        expires = int((time.time() + 60) * 1000)
        signature = self._generate_signature(expires)
        
        return {
            "op": "auth",
            "args": [self.credentials.api_key, expires, signature]
        }
    
    def connect_private(self, callback: Callable):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É"""
        try:
            def on_message(ws, message):
                try:
                    data = json.loads(message)
                    if data.get('success'):
                        logger.info("‚úÖ WebSocket –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                    callback(data)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WS —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            def on_error(ws, error):
                logger.error(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {error}")
                self._schedule_reconnect('private')
            
            def on_close(ws, close_status_code, close_msg):
                logger.warning("‚ö†Ô∏è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                self._schedule_reconnect('private')
            
            def on_open(ws):
                logger.info("üîó WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
                auth_payload = self._create_auth_payload()
                ws.send(json.dumps(auth_payload))
            
            ws = websocket.WebSocketApp(
                self.endpoints.ws_private,
                on_message=on_message,
                on_error=on_error,
                on_close=on_close,
                on_open=on_open
            )
            
            self.connections['private'] = ws
            
            # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def run_ws():
                ws.run_forever(ping_interval=self.ping_interval)
            
            thread = threading.Thread(target=run_ws, daemon=True)
            thread.start()
            
            # –ó–∞–ø—É—Å–∫ heartbeat
            if not self.heartbeat_task or self.heartbeat_task.done():
                self.heartbeat_task = asyncio.create_task(self._websocket_heartbeat())
                logger.info("üíì WebSocket heartbeat –∑–∞–ø—É—â–µ–Ω")
            
            return ws
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ WebSocket: {e}")
            return None
    
    def connect_public(self, callback: Callable):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É –∫–∞–Ω–∞–ª—É"""
        try:
            def on_message(ws, message):
                try:
                    data = json.loads(message)
                    callback(data)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WS —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            def on_error(ws, error):
                logger.error(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {error}")
                self._schedule_reconnect('public')
            
            def on_close(ws, close_status_code, close_msg):
                logger.warning("‚ö†Ô∏è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                self._schedule_reconnect('public')
            
            def on_open(ws):
                logger.info("üîó –ü—É–±–ª–∏—á–Ω–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ")
            
            ws = websocket.WebSocketApp(
                self.endpoints.ws_public + "/linear",
                on_message=on_message,
                on_error=on_error,
                on_close=on_close,
                on_open=on_open
            )
            
            self.connections['public'] = ws
            
            # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def run_ws():
                ws.run_forever(ping_interval=self.ping_interval)
            
            thread = threading.Thread(target=run_ws, daemon=True)
            thread.start()
            
            # –ó–∞–ø—É—Å–∫ heartbeat
            if not self.heartbeat_task or self.heartbeat_task.done():
                self.heartbeat_task = asyncio.create_task(self._websocket_heartbeat())
                logger.info("üíì WebSocket heartbeat –∑–∞–ø—É—â–µ–Ω")
            
            return ws
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ WebSocket: {e}")
            return None
    
    def subscribe(self, channel: str, topics: List[str], ws_type: str = 'public'):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
        if ws_type not in self.connections:
            logger.error(f"‚ùå WebSocket {ws_type} –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return False
        
        ws = self.connections[ws_type]
        
        try:
            for topic in topics:
                subscribe_msg = {
                    "op": "subscribe",
                    "args": [f"{channel}.{topic}"]
                }
                ws.send(json.dumps(subscribe_msg))
                logger.info(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {channel}.{topic}")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    
    def _schedule_reconnect(self, ws_type: str):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        attempts = self.reconnect_attempts.get(ws_type, 0)
        if attempts < self.max_reconnect_attempts:
            self.reconnect_attempts[ws_type] = attempts + 1
            delay = min(60, (2 ** attempts))
            
            logger.info(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {ws_type} —á–µ—Ä–µ–∑ {delay:.1f}s")
            timer = threading.Timer(delay, self._reconnect, args=[ws_type])
            timer.start()
    
    def _reconnect(self, ws_type: str):
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket"""
        try:
            logger.info(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {ws_type}...")
            if ws_type in self.connections:
                self.connections[ws_type].close()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if ws_type == 'private':
                callback = self.callbacks.get('private')
                if callback:
                    self.connect_private(callback)
            elif ws_type == 'public':
                callback = self.callbacks.get('public')
                if callback:
                    self.connect_public(callback)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {ws_type}: {e}")

    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ heartbeat
            if hasattr(self, 'heartbeat_task') and self.heartbeat_task and not self.heartbeat_task.done():
                self.heartbeat_task.cancel()
                try:
                    # await self.heartbeat_task  # –≠—Ç–æ –≤ async –º–µ—Ç–æ–¥–µ
                    pass
                except:
                    pass
                logger.info("üíî WebSocket heartbeat –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            for ws_type, ws in self.connections.items():
                if ws:
                    ws.close()
            self.connections.clear()
            logger.info("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è WebSocket: {e}")

class BybitClientV5:
    """Production-ready –∫–ª–∏–µ–Ω—Ç –¥–ª—è Bybit API v5 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    
    def __init__(self, api_key: str, secret: str, testnet: bool = True):
        self.credentials = BybitCredentials(api_key, secret, testnet)
        self.testnet = testnet
        self.exchange = None
        self.is_initialized = False
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if testnet:
            self.endpoints = BybitEndpoints(
                rest_base="https://api-testnet.bybit.com",
                ws_public="wss://stream-testnet.bybit.com/v5/public",
                ws_private="wss://stream-testnet.bybit.com/v5/private"
            )
        else:
            self.endpoints = BybitEndpoints(
                rest_base="https://api.bybit.com",
                ws_public="wss://stream.bybit.com/v5/public",
                ws_private="wss://stream.bybit.com/v5/private"
            )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ä–∞–∑—É
        self.ws_manager = BybitWebSocketManager(self.credentials, self.endpoints)
        
        # –°—á–µ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.request_count = 0
        self.error_count = 0
        self.success_count = 0
        self.last_request_time = None
        
        # –ö—ç—à –¥–∞–Ω–Ω—ã—Ö
        self.cache = {
            'positions': {},
            'orders': {},
            'balance': {},
            'tickers': {},
            'last_update': {}
        }

    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            if self.is_initialized:
                logger.debug("‚ÑπÔ∏è –ö–ª–∏–µ–Ω—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return True
            
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bybit V5 –∫–ª–∏–µ–Ω—Ç–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
            if not self.credentials.api_key or not self.credentials.api_secret:
                logger.error("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                return False
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CCXT exchange
            try:
                self.exchange = ccxt.bybit({
                    'apiKey': self.credentials.api_key,
                    'secret': self.credentials.api_secret,
                    'sandbox': self.testnet,
                    'enableRateLimit': True,
                    'rateLimit': 2000,  # –£–≤–µ–ª–∏—á–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª
                    'timeout': 30000,
                    'options': {
                        'defaultType': 'linear'
                    }
                })
                logger.info("‚úÖ CCXT exchange –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CCXT: {e}")
                return False
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            try:
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
                server_time = await self._get_server_time()
                if server_time:
                    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    self.is_initialized = True
                    return True
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞")
                    return False
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    async def _get_server_time(self) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.endpoints.rest_base}/v5/market/time"
                async with session.get(url) as response:
                    data = await response.json()
                    if data.get('retCode') == 0:
                        return int(data['result']['timeNano'])
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return None

    def _generate_signature(self, timestamp: int, method: str, endpoint: str, 
                          params: str = "") -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è REST API"""
        param_str = f"{timestamp}{self.credentials.api_key}{self.credentials.recv_window}{params}"
        return hmac.new(
            bytes(self.credentials.api_secret, "utf-8"),
            param_str.encode("utf-8"),
            hashlib.sha256
        ).hexdigest()

    def _get_headers(self, timestamp: int, signature: str, content_type: str = 'application/json') -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
        return {
            'X-BAPI-API-KEY': self.credentials.api_key,
            'X-BAPI-TIMESTAMP': str(timestamp),
            'X-BAPI-SIGN': signature,
            'X-BAPI-RECV-WINDOW': str(self.credentials.recv_window),
            'Content-Type': content_type
        }

    async def _make_request(self, method: str, endpoint: str, params: dict = None) -> dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ Bybit API - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            if not self.is_initialized:
                await self.initialize()
            
            timestamp = int(time.time() * 1000)
            
            async with aiohttp.ClientSession() as session:
                url = f"{self.endpoints.rest_base}{endpoint}"
                
                if method == "GET":
                    # –î–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ query string
                    query_string = "&".join([f"{k}={v}" for k, v in (params or {}).items()])
                    signature = self._generate_signature(timestamp, method, endpoint, query_string)
                    
                    if query_string:
                        url += f"?{query_string}"
                    
                    headers = self._get_headers(timestamp, signature)
                    
                    async with session.get(url, headers=headers) as response:
                        result = await response.json()
                        self._update_stats(result)
                        return result
                        
                else:  # POST, PUT, DELETE
                    # –î–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ JSON body
                    json_body = json.dumps(params or {})
                    signature = self._generate_signature(timestamp, method, endpoint, json_body)
                    
                    headers = self._get_headers(timestamp, signature)
                    
                    async with session.request(method, url, headers=headers, data=json_body) as response:
                        result = await response.json()
                        self._update_stats(result)
                        return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞ {method} {endpoint}: {e}")
            self.error_count += 1
            return {
                'retCode': -1,
                'retMsg': str(e),
                'result': None
            }

    def _update_stats(self, response: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.request_count += 1
        self.last_request_time = datetime.now()
        
        if response.get('retCode') == 0:
            self.success_count += 1
        else:
            self.error_count += 1

    # ================== WALLET & ACCOUNT METHODS ==================

    async def get_wallet_balance(self, account_type: str = "UNIFIED", coin: str = None) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        params = {"accountType": account_type}
        if coin:
            params["coin"] = coin
        
        response = await self._make_request('GET', '/v5/account/wallet-balance', params)
        
        if response.get('retCode') == 0:
            self.cache['balance'] = response['result']
            logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {account_type}")
        
        return response

    async def get_coin_balance(self, account_type: str = "UNIFIED", coin: str = "USDT") -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            balance_data = await self.get_wallet_balance(account_type, coin)
            if balance_data.get('retCode') == 0:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                result = balance_data.get('result', {})
                account_list = result.get('list', [])
                
                if account_list:
                    coins = account_list[0].get('coin', [])
                    for coin_data in coins:
                        if coin_data.get('coin') == coin:
                            return float(coin_data.get('walletBalance', 0))
            return 0.0
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ {coin}: {e}")
            return 0.0

    async def get_account_info(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
        try:
            response = await self._make_request("GET", "/v5/account/info")
            
            if response and response.get('retCode') == 0:
                account_info = response.get('result', {})
                logger.debug(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞")
                return {
                    'success': True,
                    'data': account_info
                }
            else:
                error_msg = response.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if response else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {error_msg}")
                return {
                    'success': False,
                    'error': error_msg
                }
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {e}")
            return {
                'success': False,
                'error': str(e)
            }

    async def get_server_time(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            response = await self._make_request("GET", "/v5/market/time")
            
            if response and response.get('retCode') == 0:
                return {
                    'success': True,
                    'data': response.get('result', {})
                }
            else:
                return {
                    'success': False,
                    'error': response.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if response else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'
                }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return {'success': False, 'error': str(e)}

    # ================== POSITION METHODS ==================

    async def get_positions(self, category: str = "linear", symbol: str = None, settleCoin: str = None) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            if not self.is_initialized:
                await self.initialize()
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            params = {"category": category}
            
            if symbol:
                params["symbol"] = symbol
            elif settleCoin:
                params["settleCoin"] = settleCoin
            else:
                # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –Ω—É–∂–µ–Ω settleCoin
                params["settleCoin"] = "USDT"
            
            response = await self._make_request("GET", "/v5/position/list", params)
            
            if response and response.get('retCode') == 0:
                logger.debug(f"üìä –ü–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è category={category}")
                return {
                    'success': True,
                    'data': response.get('result', {})
                }
            else:
                error_msg = response.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if response else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {error_msg}")
                return {
                    'success': False,
                    'error': error_msg
                }
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return {
                'success': False,
                'error': str(e)
            }

    async def set_leverage(self, category: str, symbol: str, buy_leverage: str, 
                          sell_leverage: str = None) -> dict:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞"""
        params = {
            "category": category,
            "symbol": symbol,
            "buyLeverage": buy_leverage,
            "sellLeverage": sell_leverage or buy_leverage
        }
        
        response = await self._make_request('POST', '/v5/position/set-leverage', params)
        
        if response.get('retCode') == 0:
            logger.info(f"üîß –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {symbol}: {buy_leverage}x")
        
        return response

    # ================== ORDER METHODS ==================

    async def place_order(self, category: str, symbol: str, side: str, order_type: str,
                         qty: str, price: str = None, time_in_force: str = "GTC",
                         position_idx: int = 0, reduce_only: bool = False,
                         take_profit: str = None, stop_loss: str = None,
                         tp_sl_mode: str = "Full", **kwargs) -> dict:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞"""
        params = {
            "category": category,
            "symbol": symbol,
            "side": side,
            "orderType": order_type,
            "qty": qty,
            "positionIdx": position_idx
        }
        
        if price:
            params["price"] = price
        if order_type == "Limit":
            params["timeInForce"] = time_in_force
        if reduce_only:
            params["reduceOnly"] = reduce_only
        if take_profit:
            params["takeProfit"] = take_profit
        if stop_loss:
            params["stopLoss"] = stop_loss
        if take_profit or stop_loss:
            params["tpslMode"] = tp_sl_mode
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params.update(kwargs)
        
        response = await self._make_request('POST', '/v5/order/create', params)
        
        if response.get('retCode') == 0:
            order_id = response['result']['orderId']
            logger.info(f"üìù –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {symbol} {side} {qty} - ID: {order_id}")
        
        return response

    async def place_market_order(self, symbol: str, side: str, qty: str, 
                                category: str = "linear", **kwargs) -> dict:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ market –æ—Ä–¥–µ—Ä–∞"""
        return await self.place_order(
            category=category,
            symbol=symbol,
            side=side,
            order_type="Market",
            qty=qty,
            **kwargs
        )

    async def place_limit_order(self, symbol: str, side: str, qty: str, price: str,
                               category: str = "linear", **kwargs) -> dict:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ limit –æ—Ä–¥–µ—Ä–∞"""
        return await self.place_order(
            category=category,
            symbol=symbol,
            side=side,
            order_type="Limit",
            qty=qty,
            price=price,
            **kwargs
        )

    # ================== MARKET DATA METHODS ==================

    async def get_tickers(self, category: str = "linear", symbol: str = None) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        params = {"category": category}
        if symbol:
            params["symbol"] = symbol
        
        response = await self._make_request('GET', '/v5/market/tickers', params)
        
        if response.get('retCode') == 0:
            self.cache['tickers'] = response['result']
            self.cache['last_update']['tickers'] = time.time()
        
        return response

    async def get_market_data(self, symbol: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            ticker_data = await self.get_tickers("linear", symbol)
            if ticker_data.get('retCode') == 0:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                result = ticker_data.get('result', {})
                ticker_list = result.get('list', [])
                if ticker_list:
                    return ticker_list[0]
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
            return None

    async def get_instruments_info(self, category: str = "linear", symbol: str = None) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö"""
        try:
            if not self.is_initialized:
                await self.initialize()
            
            params = {"category": category}
            if symbol:
                params["symbol"] = symbol
            
            response = await self._make_request("GET", "/v5/market/instruments-info", params)
            
            if response and response.get('retCode') == 0:
                instruments = response.get('result', {})
                instruments_list = instruments.get('list', [])
                logger.debug(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(instruments_list)}")
                return {
                    'success': True,
                    'data': instruments
                }
            else:
                error_msg = response.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if response else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {error_msg}")
                return {
                    'success': False,
                    'error': error_msg
                }
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
            return {
                'success': False,
                'error': str(e)
            }

    # ================== WEBSOCKET METHODS ==================

    def start_private_websocket(self, callback: Callable):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ WebSocket - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        if not self.ws_manager:
            logger.error("‚ùå WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None
        
        self.ws_manager.callbacks['private'] = callback
        return self.ws_manager.connect_private(callback)

    def start_public_websocket(self, callback: Callable):
        """–ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏—á–Ω–æ–≥–æ WebSocket - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        if not self.ws_manager:
            logger.error("‚ùå WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None
        
        self.ws_manager.callbacks['public'] = callback
        return self.ws_manager.connect_public(callback)

    def subscribe_positions(self):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        if not self.ws_manager:
            logger.error("‚ùå WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        return self.ws_manager.subscribe("position", [""], "private")

    def subscribe_orders(self):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        if not self.ws_manager:
            logger.error("‚ùå WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        return self.ws_manager.subscribe("order", [""], "private")

    def subscribe_wallet(self):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        if not self.ws_manager:
            logger.error("‚ùå WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        return self.ws_manager.subscribe("wallet", [""], "private")

    def subscribe_ticker(self, symbol: str):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        if not self.ws_manager:
            logger.error("‚ùå WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        return self.ws_manager.subscribe("tickers", [symbol], "public")

    def subscribe_orderbook(self, symbol: str, depth: int = 50):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç–∞–∫–∞–Ω –æ—Ä–¥–µ—Ä–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        if not self.ws_manager:
            logger.error("‚ùå WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        return self.ws_manager.subscribe("orderbook", [f"{depth}.{symbol}"], "public")

    # ================== UTILITY METHODS ==================

    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        return {
            'total_requests': self.request_count,
            'successful_requests': self.success_count,
            'failed_requests': self.error_count,
            'success_rate': self.success_count / max(self.request_count, 1) * 100,
            'last_request': self.last_request_time,
            'is_initialized': self.is_initialized,
            'testnet_mode': self.testnet,
            'websocket_manager_ready': self.ws_manager is not None
        }

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            logger.info("üßπ –ù–∞—á–∞–ª–æ cleanup –∫–ª–∏–µ–Ω—Ç–∞...")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if self.ws_manager:
                try:
                    self.ws_manager.disconnect()
                    logger.info("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è WebSocket: {e}")
            
            # –û–±–Ω—É–ª—è–µ–º —Å—Å—ã–ª–∫–∏
            self.exchange = None
            self.ws_manager = None
            self.is_initialized = False
            
            logger.info("‚úÖ Cleanup –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ cleanup: {e}")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å
            self.is_initialized = False

def create_bybit_client_from_env(testnet: bool = True) -> BybitClientV5:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Bybit –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    api_key = ""
    secret = ""
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏ –∏–∑ unified_config
    if UNIFIED_CONFIG_AVAILABLE and unified_config:
        try:
            api_key = getattr(unified_config, 'BYBIT_API_KEY', '')
            secret = (getattr(unified_config, 'BYBIT_API_SECRET', '') or 
                     getattr(unified_config, 'BYBIT_SECRET_KEY', '') or
                     getattr(unified_config, 'BYBIT_SECRET', ''))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º BYBIT_TESTNET –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            config_testnet = getattr(unified_config, 'BYBIT_TESTNET', testnet)
            if isinstance(config_testnet, bool):
                testnet = config_testnet
                     
            logger.info("üìã API –∫–ª—é—á–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ unified_config")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π –∏–∑ unified_config: {e}")
    
    # Fallback –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not api_key or not secret:
        if testnet:
            api_key = api_key or os.getenv('BYBIT_TESTNET_API_KEY', os.getenv('BYBIT_API_KEY', ''))
            secret = secret or os.getenv('BYBIT_TESTNET_SECRET', os.getenv('BYBIT_API_SECRET', ''))
        else:
            api_key = api_key or os.getenv('BYBIT_MAINNET_API_KEY', os.getenv('BYBIT_API_KEY', ''))
            secret = secret or os.getenv('BYBIT_MAINNET_SECRET', os.getenv('BYBIT_API_SECRET', ''))
        
        if api_key or secret:
            logger.info("üìã API –∫–ª—é—á–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª—é—á–µ–π
    if not api_key or not secret:
        logger.warning(f"‚ö†Ô∏è API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {'testnet' if testnet else 'mainnet'}")
        logger.warning(f"‚ö†Ô∏è API key: {'‚úÖ –µ—Å—Ç—å' if api_key else '‚ùå –Ω–µ—Ç'}")
        logger.warning(f"‚ö†Ô∏è Secret: {'‚úÖ –µ—Å—Ç—å' if secret else '‚ùå –Ω–µ—Ç'}")
    else:
        logger.info(f"‚úÖ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è {'testnet' if testnet else 'mainnet'}")
    
    return BybitClientV5(api_key, secret, testnet)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
def calculate_position_size(balance: float, risk_percent: float, entry_price: float, 
                           stop_price: float) -> float:
    """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞"""
    risk_amount = balance * risk_percent
    price_diff = abs(entry_price - stop_price)
    risk_per_unit = price_diff / entry_price
    
    return risk_amount / (entry_price * risk_per_unit)

def calculate_liquidation_price(entry_price: float, leverage: int, side: str, 
                               fee_rate: float = 0.0006) -> float:
    """–†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏"""
    if side == "Buy":
        return entry_price * (1 - 1/leverage + fee_rate)
    else:  # Sell
        return entry_price * (1 + 1/leverage - fee_rate)

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = [
    'BybitClientV5', 
    'create_bybit_client_from_env', 
    'BybitAPIError',
    'calculate_position_size',
    'calculate_liquidation_price'
]