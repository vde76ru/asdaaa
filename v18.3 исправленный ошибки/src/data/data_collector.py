"""
–†–µ–∞–ª—å–Ω—ã–π —Å–±–æ—Ä—â–∏–∫ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–§–∞–π–ª: src/data/data_collector.py
"""
import asyncio
import logging
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
from collections import defaultdict

logger = logging.getLogger(__name__)

class DataCollector:
    """–†–µ–∞–ª—å–Ω—ã–π —Å–±–æ—Ä—â–∏–∫ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, exchange_client, db_session=None):
        self.exchange = exchange_client
        self.db = db_session
        self.is_running = False
        self.is_initialized = True
        self.collected_data = defaultdict(dict)
        self.collection_tasks = {}
        self.update_interval = 60  # —Å–µ–∫—É–Ω–¥
        self.active_pairs = []
        
        logger.info("‚úÖ DataCollector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        self.is_running = True
        logger.info("‚úÖ DataCollector –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ —Å–±–æ—Ä–∞
        asyncio.create_task(self._continuous_collection())
        return True
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        self.is_running = False
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        for task in self.collection_tasks.values():
            if not task.done():
                task.cancel()
        
        logger.info("‚úÖ DataCollector –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    
    async def _continuous_collection(self):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä
                active_pairs = await self._get_active_pairs()
                
                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
                tasks = []
                for symbol in active_pairs:
                    task = asyncio.create_task(self.collect_market_data(symbol))
                    tasks.append(task)
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
                if tasks:
                    await asyncio.gather(*tasks, return_exceptions=True)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                if self.db:
                    await self._save_to_database()
                
                await asyncio.sleep(self.update_interval)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ continuous_collection: {e}")
                await asyncio.sleep(10)
    
    async def collect_market_data(self, symbol: str, data: dict = None) -> Dict[str, Any]:
        """–°–±–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∏–∑–≤–Ω–µ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            if data is not None:  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –≤–º–µ—Å—Ç–æ if data
                self.collected_data[symbol] = {
                    'data': data,
                    'timestamp': datetime.utcnow()
                }
                logger.debug(f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤–Ω–µ—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
                return data
            
            # –ò–Ω–∞—á–µ —Å–æ–±–∏—Ä–∞–µ–º —Å–∞–º–∏
            collected = {}
            
            # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏ —Ç–∏–∫–µ—Ä
            ticker = await self.exchange.fetch_ticker(symbol)
            if ticker:
                collected['ticker'] = {
                    'symbol': symbol,
                    'last': float(ticker.get('last', 0)),  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float
                    'bid': float(ticker.get('bid', 0)),
                    'ask': float(ticker.get('ask', 0)),
                    'volume': float(ticker.get('baseVolume', 0)),
                    'quote_volume': float(ticker.get('quoteVolume', 0)),
                    'change': float(ticker.get('percentage', 0)),
                    'timestamp': datetime.utcnow()
                }
            
            # 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∫–∞–Ω –æ—Ä–¥–µ—Ä–æ–≤
            orderbook = await self.exchange.fetch_order_book(symbol, limit=20)
            if orderbook:
                collected['orderbook'] = {
                    'bids': orderbook.get('bids', [])[:10],
                    'asks': orderbook.get('asks', [])[:10],
                    'timestamp': orderbook.get('timestamp', datetime.utcnow())
                }
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥ –∏ –≥–ª—É–±–∏–Ω—É
                if orderbook['bids'] and orderbook['asks']:
                    best_bid = float(orderbook['bids'][0][0])  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float
                    best_ask = float(orderbook['asks'][0][0])
                    collected['spread'] = (best_ask - best_bid) / best_bid * 100
                    collected['bid_depth'] = sum(float(bid[1]) for bid in orderbook['bids'][:5])
                    collected['ask_depth'] = sum(float(ask[1]) for ask in orderbook['asks'][:5])
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
            trades = await self.exchange.fetch_trades(symbol, limit=100)
            if trades:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∏–ø–æ–≤
                buy_volume = sum(float(t.get('amount', 0)) for t in trades if t.get('side') == 'buy')
                sell_volume = sum(float(t.get('amount', 0)) for t in trades if t.get('side') == 'sell')
                total_price = sum(float(t.get('price', 0)) for t in trades)
                
                collected['recent_trades'] = {
                    'count': len(trades),
                    'buy_volume': buy_volume,
                    'sell_volume': sell_volume,
                    'avg_price': total_price / len(trades) if trades else 0,
                    'timestamp': datetime.utcnow()
                }
            
            # 4. –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            ohlcv = await self.exchange.fetch_ohlcv(symbol, '5m', limit=100)
            if ohlcv:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ timestamp –∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
                df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ —á–∏—Å–ª–æ–≤—ã–µ —Ç–∏–ø—ã
                for col in ['open', 'high', 'low', 'close', 'volume']:
                    df[col] = pd.to_numeric(df[col], errors='coerce')
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp
                if df['timestamp'].dtype == 'object':
                    df['timestamp'] = pd.to_numeric(df['timestamp'], errors='coerce')
                df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
                df = df.dropna()
                
                if len(df) >= 20:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
                    collected['candles'] = df.to_dict('records')[-20:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–≤–µ—á–µ–π
                    collected['technical'] = {
                        'sma_20': float(df['close'].rolling(20).mean().iloc[-1]),
                        'volume_avg': float(df['volume'].rolling(20).mean().iloc[-1]),
                        'volatility': float(df['close'].pct_change().std() * 100),
                        'high_24h': float(df['high'].max()),
                        'low_24h': float(df['low'].min())
                    }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            self.collected_data[symbol] = {
                'data': collected,
                'timestamp': datetime.utcnow()
            }
            
            logger.debug(f"üìä –°–æ–±—Ä–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
            return collected
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return {}
    
    async def collect_orderbook(self, symbol: str, depth: int = 20) -> Dict[str, Any]:
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–∫–∞–Ω–∞"""
        try:
            orderbook = await self.exchange.fetch_order_book(symbol, limit=depth)
            return orderbook
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞–∫–∞–Ω–∞ {symbol}: {e}")
            return {}
    
    async def _get_active_pairs(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —É–∂–µ –∑–∞–¥–∞–Ω
        if self.active_pairs:
            return self.active_pairs
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        try:
            from ..core.unified_config import unified_config
            return unified_config.TRADING_PAIRS or ['BTCUSDT', 'ETHUSDT']
        except:
            return ['BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'BNBUSDT', 'SOLUSDT']
    
    def set_active_pairs(self, pairs: List[str]):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä"""
        self.active_pairs = pairs
        logger.info(f"üìä –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã: {pairs}")
    
    async def _save_to_database(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î"""
        if not self.db:
            return
        
        try:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—ã candles, market_conditions
            # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:
            # for symbol, data in self.collected_data.items():
            #     candle = Candle(
            #         symbol=symbol,
            #         timeframe='5m',
            #         open=data['ticker']['last'],
            #         high=data['ticker']['last'],
            #         low=data['ticker']['last'],
            #         close=data['ticker']['last'],
            #         volume=data['ticker']['volume'],
            #         timestamp=data['timestamp']
            #     )
            #     self.db.add(candle)
            # self.db.commit()
            pass
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
    
    def get_data(self, symbol: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return self.collected_data.get(symbol, {})
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–±–æ—Ä—â–∏–∫–∞"""
        return {
            'running': self.is_running,
            'initialized': self.is_initialized,
            'data_count': len(self.collected_data),
            'symbols': list(self.collected_data.keys()),
            'last_update': max(
                (d['timestamp'] for d in self.collected_data.values() if 'timestamp' in d),
                default=None
            )
        }
    
    def get_all_data(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return dict(self.collected_data)