#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø BYBIT V5 –° –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –°–ò–°–¢–ï–ú–û–ô
======================================================
–§–∞–π–ª: src/exchange/bybit_integration.py

‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ API –æ—Ç–≤–µ—Ç–æ–≤
‚úÖ WebSocket —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å legacy —Å–∏—Å—Ç–µ–º–æ–π
"""

import asyncio
import logging
import time
import threading
from typing import Dict, Any, Optional, Union, List, Callable
from datetime import datetime, timedelta
from dataclasses import dataclass

try:
    from .bybit_client_v5 import BybitClientV5, create_bybit_client_from_env, BybitAPIError
    V5_AVAILABLE = True
except ImportError:
    V5_AVAILABLE = False
    BybitClientV5 = None
    create_bybit_client_from_env = None
    BybitAPIError = Exception

try:
    from ..core.unified_config import unified_config
    CONFIG_AVAILABLE = True
except ImportError:
    unified_config = None
    CONFIG_AVAILABLE = False

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
_cached_clients = {}
_client_locks = {}
_initialization_lock = asyncio.Lock()

@dataclass
class TradingSignal:
    """–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
    symbol: str
    side: str  # "Buy" –∏–ª–∏ "Sell"
    signal_type: str  # "entry", "exit", "tp", "sl"
    price: float
    confidence: float
    timestamp: datetime
    metadata: Dict[str, Any] = None

@dataclass
class PositionInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏"""
    symbol: str
    side: str
    size: float
    entry_price: float
    unrealized_pnl: float
    percentage: float
    leverage: float

class BybitWebSocketHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    
    def __init__(self, integration_manager):
        self.integration_manager = integration_manager
        self.callbacks = {
            'position': [],
            'order': [],
            'wallet': [],
            'ticker': [],
            'orderbook': []
        }
        
    def add_callback(self, event_type: str, callback: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback –¥–ª—è —Å–æ–±—ã—Ç–∏—è"""
        if event_type in self.callbacks:
            self.callbacks[event_type].append(callback)
            logger.info(f"üì° –î–æ–±–∞–≤–ª–µ–Ω callback –¥–ª—è {event_type}")
    
    def handle_private_message(self, message: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            topic = message.get('topic', '')
            data = message.get('data', [])
            
            if 'position' in topic:
                self._handle_position_update(data)
            elif 'order' in topic:
                self._handle_order_update(data)
            elif 'wallet' in topic:
                self._handle_wallet_update(data)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ WS —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def handle_public_message(self, message: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            topic = message.get('topic', '')
            data = message.get('data', {})
            
            if 'tickers' in topic:
                self._handle_ticker_update(data)
            elif 'orderbook' in topic:
                self._handle_orderbook_update(data)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ WS —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
    def _handle_position_update(self, data: List[dict]):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π"""
        try:
            if not isinstance(data, list):
                logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {type(data)}")
                return
            
            for position in data:
                try:
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                    required_fields = ['symbol', 'side', 'size']
                    missing_fields = [field for field in required_fields if field not in position]
                    
                    if missing_fields:
                        logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ –ø–æ–∑–∏—Ü–∏–∏: {missing_fields}")
                        continue
                    
                    symbol = position.get('symbol')
                    side = position.get('side')
                    size = float(position.get('size', 0))
                    unrealized_pnl = float(position.get('unrealisedPnl', 0))
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ–∑–∏—Ü–∏–π
                    self.integration_manager.data_cache['positions'][symbol] = {
                        'symbol': symbol,
                        'side': side,
                        'size': size,
                        'unrealized_pnl': unrealized_pnl,
                        'updated_at': time.time()
                    }
                    
                    logger.info(f"üìä –ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {symbol} {side} {size} PnL: {unrealized_pnl}")
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ callbacks
                    for callback in self.callbacks.get('position', []):
                        try:
                            callback(position)
                        except Exception as callback_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ position callback: {callback_error}")
                            
                except (ValueError, TypeError) as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏: {e}")
                    continue
                    
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ _handle_position_update: {e}")
    
    def _handle_bybit_response(self, response: dict, operation: str) -> dict:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ API"""
        if not response:
            return {'success': False, 'error': f'{operation}: No response from server'}
        
        ret_code = response.get('retCode', -1)
        ret_msg = response.get('retMsg', 'Unknown error')
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫ Bybit
        if ret_code == 0:
            return {'success': True, 'data': response.get('result', {})}
        elif ret_code == 10006:  # Rate limit
            return {'success': False, 'error': 'rate_limit', 'retry_after': 1}
        elif ret_code in [10003, 10004, 10005]:  # Auth errors
            return {'success': False, 'error': 'authentication_failed', 'details': ret_msg}
        elif ret_code == 10001:  # Invalid parameter
            return {'success': False, 'error': 'invalid_parameter', 'details': ret_msg}
        else:
            return {'success': False, 'error': f'{operation}_failed', 'code': ret_code, 'details': ret_msg}
    
    def _handle_order_update(self, data: List[dict]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤"""
        for order in data:
            order_id = order.get('orderId')
            symbol = order.get('symbol')
            status = order.get('orderStatus')
            
            logger.info(f"üìù –û—Ä–¥–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω: {order_id} {symbol} {status}")
            
            # –í—ã–∑—ã–≤–∞–µ–º callbacks
            for callback in self.callbacks['order']:
                try:
                    callback(order)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ order callback: {e}")
    
    def _handle_wallet_update(self, data: List[dict]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
        for account in data:
            for coin_data in account.get('coin', []):
                coin = coin_data.get('coin')
                balance = coin_data.get('walletBalance')
                
                logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å {coin}: {balance}")
            
            # –í—ã–∑—ã–≤–∞–µ–º callbacks
            for callback in self.callbacks['wallet']:
                try:
                    callback(account)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ wallet callback: {e}")
    
    def _handle_ticker_update(self, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞"""
        symbol = data.get('symbol')
        price = data.get('lastPrice')
        
        if symbol and price:
            logger.debug(f"üìà –¢–∏–∫–µ—Ä {symbol}: {price}")
            
            # –í—ã–∑—ã–≤–∞–µ–º callbacks
            for callback in self.callbacks['ticker']:
                try:
                    callback(data)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ ticker callback: {e}")
    
    def _handle_orderbook_update(self, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞"""
        symbol = data.get('s')
        
        if symbol:
            logger.debug(f"üìä –°—Ç–∞–∫–∞–Ω {symbol} –æ–±–Ω–æ–≤–ª–µ–Ω")
            
            # –í—ã–∑—ã–≤–∞–µ–º callbacks
            for callback in self.callbacks['orderbook']:
                try:
                    callback(data)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ orderbook callback: {e}")

class BybitIntegrationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Bybit V5 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    
    def __init__(self, legacy_client=None, testnet: bool = True):
        self.legacy_client = legacy_client
        self.testnet = testnet
        self.v5_client = None
        self.is_initialized = False
        
        # WebSocket –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.ws_handler = BybitWebSocketHandler(self)
        self.ws_connected = {'private': False, 'public': False}
        
        # –ö—ç—à –¥–∞–Ω–Ω—ã—Ö
        self.data_cache = {
            'positions': {},
            'orders': {},
            'balance': {},
            'tickers': {},
            'last_update': {}
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'v5_requests': 0,
            'legacy_requests': 0,
            'websocket_messages': 0,
            'errors': 0,
            'start_time': time.time()
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.auto_update_interval = 30  # —Å–µ–∫—É–Ω–¥
        self.auto_update_task = None
        self._running = True
        
        logger.info("üîß BybitIntegrationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def initialize(self, force_new: bool = False) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        global _cached_clients, _client_locks
        
        if not V5_AVAILABLE:
            logger.error("‚ùå Bybit V5 –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        async with _initialization_lock:
            try:
                logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bybit –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
                
                client_key = f"bybit_v5_{'testnet' if self.testnet else 'mainnet'}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
                if not force_new and client_key in _cached_clients:
                    cached_client = _cached_clients[client_key]
                    if hasattr(cached_client, 'is_initialized') and cached_client.is_initialized:
                        logger.info("‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π V5 –∫–ª–∏–µ–Ω—Ç")
                        self.v5_client = cached_client
                        self.is_initialized = True
                        await self._setup_websockets()
                        return True
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
                logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ V5 –∫–ª–∏–µ–Ω—Ç–∞...")
                
                try:
                    self.v5_client = create_bybit_client_from_env(testnet=self.testnet)
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
                    initialization_timeout = 60  # –£–º–µ–Ω—å—à–µ–Ω —Ç–∞–π–º–∞—É—Ç
                    initialized = await asyncio.wait_for(
                        self.v5_client.initialize(), 
                        timeout=initialization_timeout
                    )
                    
                    if initialized:
                        # –ö—ç—à–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
                        _cached_clients[client_key] = self.v5_client
                        _client_locks[client_key] = asyncio.Lock()
                        
                        self.is_initialized = True
                        logger.info("‚úÖ V5 –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                        
                        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º WebSocket
                        await self._setup_websockets()
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                        await self._start_auto_update()
                        
                        return True
                    else:
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å V5 –∫–ª–∏–µ–Ω—Ç")
                        return False
                        
                except asyncio.TimeoutError:
                    logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ({initialization_timeout}s)")
                    return False
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
                return False

    async def _setup_websockets(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            if not self.v5_client or not self.v5_client.ws_manager:
                logger.warning("‚ö†Ô∏è V5 –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π WebSocket
            private_ws = self.v5_client.start_private_websocket(self.ws_handler.handle_private_message)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π WebSocket
            public_ws = self.v5_client.start_public_websocket(self.ws_handler.handle_public_message)
            
            # –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await asyncio.sleep(3)
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            if private_ws:
                self.v5_client.subscribe_positions()
                self.v5_client.subscribe_orders()
                self.v5_client.subscribe_wallet()
                self.ws_connected['private'] = True
                logger.info("‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π WebSocket –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
            if public_ws:
                self.ws_connected['public'] = True
                logger.info("‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π WebSocket –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebSocket: {e}")

    async def _start_auto_update(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        if self.auto_update_task:
            self.auto_update_task.cancel()
        
        async def auto_update_loop():
            while self.is_initialized and self._running:
                try:
                    await self.update_all_data()
                    await asyncio.sleep(self.auto_update_interval)
                except asyncio.CancelledError:
                    break
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                    await asyncio.sleep(self.auto_update_interval)
        
        self.auto_update_task = asyncio.create_task(auto_update_loop())
        logger.info("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–æ")

    # ================== –û–°–ù–û–í–ù–´–ï –¢–û–†–ì–û–í–´–ï –ú–ï–¢–û–î–´ ==================

    async def get_balance(self, coin: str = "USDT") -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            if not self.is_initialized:
                logger.warning("‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return 0.0
            
            balance = await self.v5_client.get_coin_balance("UNIFIED", coin)
            self.stats['v5_requests'] += 1
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.data_cache['balance'][coin] = {
                'amount': balance,
                'timestamp': time.time()
            }
            
            return balance
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            self.stats['errors'] += 1
            return 0.0

    async def get_positions(self, category: str = "linear", symbol: str = None) -> List[PositionInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not self.v5_client or not self.v5_client.is_initialized:
                await self.initialize()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ V5 –∫–ª–∏–µ–Ω—Ç
            response = await self.v5_client.get_positions(category=category, symbol=symbol)
            
            if not response.get('success', False):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {response.get('error')}")
                return []
            
            positions_data = response.get('data', {})
            positions_list = positions_data.get('list', [])
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ PositionInfo –æ–±—ä–µ–∫—Ç—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
            positions = []
            for pos_data in positions_list:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞
                    size = float(pos_data.get('size', 0))
                    if size == 0:
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                    
                    position_info = PositionInfo(
                        symbol=pos_data.get('symbol', ''),
                        side=pos_data.get('side', ''),
                        size=size,
                        entry_price=float(pos_data.get('avgPrice', 0)),
                        unrealized_pnl=float(pos_data.get('unrealisedPnl', 0)),
                        percentage=float(pos_data.get('unrealisedPnl', 0)) / float(pos_data.get('positionValue', 1)) * 100,
                        leverage=float(pos_data.get('leverage', 1))
                    )
                    positions.append(position_info)
                    
                except (ValueError, TypeError, KeyError) as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–∏ {pos_data}: {e}")
                    continue
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
            return positions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_positions: {e}")
            return []

    async def place_smart_order(self, signal: TradingSignal, **kwargs) -> dict:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ —É–º–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        try:
            if not self.v5_client or not self.v5_client.is_initialized:
                await self.initialize()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
            if not signal or not signal.symbol or not signal.side:
                return {'success': False, 'error': 'Invalid trading signal'}
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞
            if not signal.symbol.endswith('USDT'):
                logger.warning(f"‚ö†Ô∏è –ù–µ–æ–±—ã—á–Ω—ã–π —Å–∏–º–≤–æ–ª: {signal.symbol}")
            
            # –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞
            symbol = signal.symbol
            side = signal.side  # "Buy" –∏–ª–∏ "Sell"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–∏–∑ kwargs –∏–ª–∏ —Ä–∞—Å—á–µ—Ç –ø–æ —Ä–∏—Å–∫—É)
            qty = kwargs.get('qty')
            if not qty:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞
                balance = await self.get_balance()
                risk_amount = balance * 0.02  # 2% —Ä–∏—Å–∫–∞
                current_price = signal.price
                
                if signal.metadata and 'stop_price' in signal.metadata:
                    stop_price = signal.metadata['stop_price']
                    price_diff = abs(current_price - stop_price)
                    qty = risk_amount / price_diff
                else:
                    qty = risk_amount / current_price * 0.01  # 1% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –≤ –ø–æ–∑–∏—Ü–∏—é
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞
            order_params = {
                'category': kwargs.get('category', 'linear'),
                'symbol': symbol,
                'side': side,
                'orderType': kwargs.get('order_type', 'Market'),
                'qty': f"{qty:.4f}",
                'positionIdx': kwargs.get('position_idx', 0)
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –¥–ª—è limit –æ—Ä–¥–µ—Ä–æ–≤
            if order_params['orderType'] == 'Limit':
                order_params['price'] = str(signal.price)
                order_params['timeInForce'] = kwargs.get('time_in_force', 'GTC')
            
            # –î–æ–±–∞–≤–ª—è–µ–º TP/SL –µ—Å–ª–∏ –µ—Å—Ç—å
            if signal.metadata:
                if 'take_profit' in signal.metadata:
                    order_params['takeProfit'] = str(signal.metadata['take_profit'])
                if 'stop_loss' in signal.metadata:
                    order_params['stopLoss'] = str(signal.metadata['stop_loss'])
                if order_params.get('takeProfit') or order_params.get('stopLoss'):
                    order_params['tpslMode'] = 'Full'
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
            response = await self.v5_client.place_order(**order_params)
            
            if response.get('retCode') == 0:
                result = response.get('result', {})
                order_id = result.get('orderId')
                
                logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {symbol} {side} {qty} - ID: {order_id}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.stats['orders_placed'] += 1
                
                return {
                    'success': True,
                    'order_id': order_id,
                    'symbol': symbol,
                    'side': side,
                    'qty': qty,
                    'details': result
                }
            else:
                error_msg = response.get('retMsg', 'Unknown error')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {error_msg}")
                
                self.stats['orders_failed'] += 1
                
                return {
                    'success': False,
                    'error': error_msg,
                    'error_code': response.get('retCode')
                }
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ place_smart_order: {e}")
            self.stats['orders_failed'] += 1
            return {
                'success': False,
                'error': str(e)
            }

    async def close_all_positions(self, symbols: List[str] = None) -> dict:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            positions = await self.get_positions()
            
            results = []
            for position in positions:
                if symbols is None or position.symbol in symbols:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ close_position –∏–∑ v5_client
                    result = await self.close_position(position.symbol)
                    results.append({
                        "symbol": position.symbol,
                        "result": result
                    })
            
            success_count = sum(1 for r in results if r['result'].get('success'))
            
            return {
                "success": True,
                "closed_positions": success_count,
                "total_positions": len(results),
                "details": results
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            return {"success": False, "error": str(e)}

    async def close_position(self, symbol: str) -> dict:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if not self.v5_client:
                return {"success": False, "error": "V5 –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
            positions_response = await self.v5_client.get_positions("linear", symbol)
            if not positions_response.get('success'):
                return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é"}
            
            position_list = positions_response.get('data', {}).get('list', [])
            if not position_list:
                return {"success": True, "message": "–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
            position = position_list[0]
            size = float(position['size'])
            
            if size == 0:
                return {"success": True, "message": "–ü–æ–∑–∏—Ü–∏—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞"}
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            close_side = "Sell" if position['side'] == "Buy" else "Buy"
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º market –æ—Ä–¥–µ—Ä–æ–º
            result = await self.v5_client.place_market_order(
                symbol=symbol,
                side=close_side,
                qty=str(abs(size)),
                category="linear",
                reduce_only=True
            )
            
            if result.get('retCode') == 0:
                logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞")
                return {"success": True, "order_id": result['result']['orderId']}
            else:
                return {"success": False, "error": result.get('retMsg')}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return {"success": False, "error": str(e)}

    async def emergency_stop(self) -> dict:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            logger.warning("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê!")
            
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ v5_client
            cancel_result = await self.v5_client._make_request('POST', '/v5/order/cancel-all', {"category": "linear"})
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
            close_result = await self.close_all_positions()
            
            logger.warning("üõë –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            return {
                "success": True,
                "orders_cancelled": cancel_result.get('retCode') == 0,
                "positions_closed": close_result.get('success', False)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return {"success": False, "error": str(e)}

    # ================== –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´ ==================

    async def get_market_overview(self, symbols: List[str] = None) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–∑–æ—Ä–∞ —Ä—ã–Ω–∫–∞"""
        try:
            if symbols is None:
                symbols = ["BTCUSDT", "ETHUSDT", "ADAUSDT", "SOLUSDT", "DOTUSDT"]
            
            market_data = {}
            
            for symbol in symbols:
                ticker_data = await self.v5_client.get_market_data(symbol)
                if ticker_data:
                    market_data[symbol] = {
                        'price': float(ticker_data['lastPrice']),
                        'change_24h': float(ticker_data['price24hPcnt']) * 100,
                        'volume_24h': float(ticker_data['volume24h']),
                        'high_24h': float(ticker_data['highPrice24h']),
                        'low_24h': float(ticker_data['lowPrice24h'])
                    }
            
            return {
                "success": True,
                "timestamp": datetime.now(),
                "data": market_data
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–∑–æ—Ä–∞ —Ä—ã–Ω–∫–∞: {e}")
            return {"success": False, "error": str(e)}

    async def get_portfolio_summary(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
            positions = await self.get_positions()
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            balance = await self.get_balance()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_unrealized_pnl = sum(pos.unrealized_pnl for pos in positions)
            total_position_value = sum(pos.size * pos.entry_price for pos in positions)
            
            portfolio_summary = {
                "total_balance": balance,
                "total_positions": len(positions),
                "total_unrealized_pnl": total_unrealized_pnl,
                "total_position_value": total_position_value,
                "portfolio_performance": (total_unrealized_pnl / max(balance, 1)) * 100,
                "positions": [
                    {
                        "symbol": pos.symbol,
                        "side": pos.side,
                        "size": pos.size,
                        "entry_price": pos.entry_price,
                        "unrealized_pnl": pos.unrealized_pnl,
                        "percentage": pos.percentage
                    }
                    for pos in positions
                ]
            }
            
            return {
                "success": True,
                "timestamp": datetime.now(),
                "data": portfolio_summary
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
            return {"success": False, "error": str(e)}

    # ================== –î–ê–ù–ù–´–ï –ò –ö–≠–®–ò–†–û–í–ê–ù–ò–ï ==================

    async def update_all_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not self.is_initialized:
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await asyncio.gather(
                self.get_balance(),
                self.get_positions(),
                return_exceptions=True
            )
            
            self.data_cache['last_update']['all'] = time.time()
            logger.debug("üîÑ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

    def get_cached_data(self, data_type: str, max_age: int = 60) -> Optional[Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            cache_entry = self.data_cache.get(data_type, {})
            if not cache_entry:
                return None
            
            timestamp = cache_entry.get('timestamp', 0)
            if time.time() - timestamp > max_age:
                return None
            
            return cache_entry.get('data')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∞ {data_type}: {e}")
            return None

    # ================== WEBSOCKET –£–ü–†–ê–í–õ–ï–ù–ò–ï ==================

    def add_position_callback(self, callback: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback –¥–ª—è –ø–æ–∑–∏—Ü–∏–π"""
        self.ws_handler.add_callback('position', callback)

    def add_order_callback(self, callback: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback –¥–ª—è –æ—Ä–¥–µ—Ä–æ–≤"""
        self.ws_handler.add_callback('order', callback)

    def add_wallet_callback(self, callback: Callable):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ callback –¥–ª—è –±–∞–ª–∞–Ω—Å–∞"""
        self.ws_handler.add_callback('wallet', callback)

    def subscribe_to_symbol(self, symbol: str):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª"""
        if self.v5_client and self.v5_client.ws_manager:
            self.v5_client.subscribe_ticker(symbol)
            self.v5_client.subscribe_orderbook(symbol)

    # ================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì ==================

    def get_integration_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        v5_stats = self.v5_client.get_stats() if self.v5_client else {}
        
        uptime = time.time() - self.stats['start_time']
        
        return {
            "integration_stats": {
                "is_initialized": self.is_initialized,
                "testnet_mode": self.testnet,
                "uptime_seconds": uptime,
                "v5_requests": self.stats['v5_requests'],
                "legacy_requests": self.stats['legacy_requests'],
                "websocket_messages": self.stats['websocket_messages'],
                "total_errors": self.stats['errors'],
                "ws_connected": self.ws_connected
            },
            "v5_client_stats": v5_stats,
            "cache_status": {
                "positions": bool(self.data_cache.get('positions')),
                "balance": bool(self.data_cache.get('balance')),
                "tickers": bool(self.data_cache.get('tickers'))
            }
        }

    # ================== CLEANUP ==================

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            logger.info("üßπ –ù–∞—á–∞–ª–æ cleanup –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            self._running = False
            
            if hasattr(self, 'auto_update_task') and self.auto_update_task:
                self.auto_update_task.cancel()
                try:
                    await self.auto_update_task
                except asyncio.CancelledError:
                    pass
            
            # –û—á–∏—â–∞–µ–º V5 –∫–ª–∏–µ–Ω—Ç
            if hasattr(self, 'v5_client') and self.v5_client:
                try:
                    self.v5_client.cleanup()
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ cleanup V5 –∫–ª–∏–µ–Ω—Ç–∞: {e}")
                self.v5_client = None
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à
            if hasattr(self, 'data_cache'):
                self.data_cache.clear()
            
            self.is_initialized = False
            self.ws_connected = {'private': False, 'public': False}
            
            logger.info("‚úÖ Cleanup –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ cleanup: {e}")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å
            self.is_initialized = False
            self.ws_connected = {'private': False, 'public': False}

# ================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–õ–ê–°–°–´ ==================

class EnhancedUnifiedExchangeClient:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π unified –∫–ª–∏–µ–Ω—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Bybit V5"""
    
    def __init__(self, testnet: bool = True):
        self.testnet = testnet
        self.bybit_integration = BybitIntegrationManager(testnet=testnet)
        self.is_ready = False
    
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è enhanced –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            success = await self.bybit_integration.initialize()
            self.is_ready = success
            return success
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ enhanced –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False
    
    async def get_balance(self, coin: str = "USDT") -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
        return await self.bybit_integration.get_balance(coin)
    
    async def place_order(self, signal: TradingSignal, **kwargs) -> dict:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
        return await self.bybit_integration.place_smart_order(signal, **kwargs)
    
    async def get_positions(self) -> List[PositionInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
        return await self.bybit_integration.get_positions()
    
    async def close_position(self, symbol: str) -> dict:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
        return await self.bybit_integration.close_position(symbol)
    
    async def emergency_stop(self) -> dict:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
        return await self.bybit_integration.emergency_stop()
    
    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
        return self.bybit_integration.get_integration_stats()
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ enhanced –∫–ª–∏–µ–Ω—Ç–∞"""
        await self.bybit_integration.cleanup()
        
    async def health_check(self) -> dict:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è exchange –∫–ª–∏–µ–Ω—Ç–∞
        
        Returns:
            dict: –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
        """
        from datetime import datetime
        
        health_status = {
            'overall_status': 'unknown',
            'timestamp': datetime.utcnow().isoformat(),
            'components': {
                'connection': False,
                'authentication': False,
                'websocket': False,
                'trading': False,
                'data_feed': False
            },
            'errors': [],
            'statistics': {
                'uptime_seconds': 0,
                'requests_count': 0,
                'errors_count': 0,
                'last_error': None
            }
        }
        
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if hasattr(self, 'bybit_integration') and self.bybit_integration.is_initialized:
                health_status['components']['connection'] = True
            else:
                health_status['errors'].append('Exchange –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            try:
                if hasattr(self, 'bybit_integration') and hasattr(self.bybit_integration, 'v5_client') and self.bybit_integration.v5_client:
                    health_status['components']['authentication'] = True
            except Exception as e:
                health_status['errors'].append(f'–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}')
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket
            if hasattr(self, 'bybit_integration') and hasattr(self.bybit_integration, 'ws_connected'):
                ws_status = (
                    self.bybit_integration.ws_connected.get('private', False) or 
                    self.bybit_integration.ws_connected.get('public', False)
                )
                health_status['components']['websocket'] = ws_status
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            health_status['components']['trading'] = (
                health_status['components']['connection'] and 
                health_status['components']['authentication']
            )
            
            # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ data feed
            health_status['components']['data_feed'] = health_status['components']['connection']
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            critical_components = ['connection', 'authentication']
            if all(health_status['components'][comp] for comp in critical_components):
                health_status['overall_status'] = 'healthy'
            elif any(health_status['components'][comp] for comp in critical_components):
                health_status['overall_status'] = 'degraded'
            else:
                health_status['overall_status'] = 'unhealthy'
            
            return health_status
            
        except Exception as e:
            health_status['overall_status'] = 'error'
            health_status['errors'].append(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ health_check: {str(e)}')
            return health_status

def upgrade_existing_client(existing_client) -> EnhancedUnifiedExchangeClient:
    """–ê–ø–≥—Ä–µ–π–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ enhanced –≤–µ—Ä—Å–∏–∏"""
    logger.info("üîÑ –ê–ø–≥—Ä–µ–π–¥ –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ enhanced –≤–µ—Ä—Å–∏–∏...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º testnet —Ä–µ–∂–∏–º
    testnet = getattr(existing_client, 'testnet', True)
    
    enhanced_client = EnhancedUnifiedExchangeClient(testnet=testnet)
    
    logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–ø–≥—Ä–µ–π–¥–µ–Ω")
    return enhanced_client

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = [
    'BybitIntegrationManager',
    'EnhancedUnifiedExchangeClient', 
    'upgrade_existing_client',
    'TradingSignal',
    'PositionInfo',
    'BybitWebSocketHandler'
]